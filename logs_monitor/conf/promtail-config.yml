server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /cache/positions.yaml # The path to the file containing the current position of the logs being read by Promtail.

#The clients block configures how Promtail connects to instances of Loki:
# check https://grafana.com/docs/loki/latest/send-data/promtail/configuration/#clients
clients:
  - url: http://host.docker.internal:3100/loki/api/v1/push
    tenant_id: tenant-java-tron-node1 # tenant_id is used to differentiate between different data sources of logs.
    headers:
      X-Scope-OrgID: tenant-java-tron-node1  # Ensure this matches your Loki tenant configuration
    batchsize: 1024 # Maximum batch size (in bytes) of logs to accumulate before sending to Loki
    batchwait: 1s   # Maximum amount of time to wait before sending a batch, even if that batch isn't full.


# The scrape_configs block configuring how Promtail can scrape logs from a series of targets using a specified discovery method
# https://grafana.com/docs/loki/latest/send-data/promtail/configuration/#scrape_configs
scrape_configs:
- job_name: system
  # A static_configs allows specifying a list of targets and a common label set for them.
  # https://grafana.com/docs/loki/latest/send-data/promtail/configuration/#static_configs
  static_configs:
  - targets:
      - localhost # Configures the discovery to look on the current machine.
    labels:
      job: general # you can use this label to filter the logs in Grafana.
      __path__: /var/log/*log  # The path matching the logs to be collected. It should be in the mounted path of the java-tron generated logs.
  - targets:
      - localhost # Configures the discovery to look on the current machine.
    labels:
      job: db  # you can use this label to filter the logs in Grafana.
      __path__: /var/log/db/*log  # The path matching the logs to be collected. It should be in the mounted path of the java-tron generated logs.
